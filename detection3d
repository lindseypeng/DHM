# -*- coding: utf-8 -*-
"""
Created on Sun Jun 25 13:41:39 2017

@author: Yip Group
"""
import cv2
from mpl_toolkits.mplot3d import Axes3D
import tifffile
from skimage.filters import threshold_sauvola
from skimage.morphology import binary_opening
from skimage.util import invert
import numpy as np
import math
import imutils
import timeit
import matplotlib.pyplot as plt


start_time=timeit.default_timer()

#load image
image_path="C:/Users/Yip Group/Desktop/june261/secondconcentration/cellulose/Pos0/reconstructed.tif"
##########################################
minN=1024
numbers=25 ##number of reconstructed images
rangenum=range(numbers)##0,1,2,3,4,..
newrawstack=np.zeros((numbers,minN,minN))
placeholder="C:/Users/Yip Group/Desktop/june261/secondconcentration/cellulose/Pos0/reconstructed/reconstructed-00{}.tif"

for f in rangenum:##looping through every single image##
    f2=f+1
    f2="{:02d}".format(f2)
    image_path=placeholder.format((f2))
    print image_path
    h = np.float32(tifffile.imread(image_path))
    newraw=h
    
    newrawstack[f,:,:] += newraw

    

###############################################################################################

#h = tifffile.imread(image_path)
#h1 = np.array(h).astype(np.float32)
#h1 = h1[:minN,:minN]



#lambda0 = 0.000488
#delx=5.32/1024
#dely=6.66/1280
#i=complex(0,1)
#pi=math.pi
maxd=90#looping of distance in mm from object to CCD , maximum is 22cm, 220mm,minmum is 60mm6
mind=40
steps=2#distanced looping step
###
###xmax=minN*delx/2
###ymax=minN*dely/2
###
###nx = np.arange (-minN/2,minN/2,1)
###ny = np.arange (-minN/2,minN/2,1)
##
###X=nx*delx
###Y=ny*dely
##
###[XX,YY]=np.meshgrid(X,Y)
##
##
###Gy = 10
###k=2*pi/lambda0
indd=np.arange(1,minN,1)
##
##
maxproj = newrawstack[0,:,:].copy()
###        
####finding Minimum projection###
###
imageslices=(maxd-mind)/steps    
slicerange = np.arange(0, imageslices, 1)
for slice in slicerange:
    amp_rec_image=newrawstack[slice].copy()
#    
    for p in indd:
        for j in indd:
              if maxproj[p][j] > amp_rec_image[p][j]:
                    maxproj[p][j]=amp_rec_image[p][j]
####
#####hp.show(threeD)
###tifffile.imshow(maxproj)
#####tifffile.imsave("/home/alinsi/Desktop/detection/stacks")
##########################FINDING INFOCUSE XY PLANE#################################
#window_size = 25
#####maxproj = np.array(maxproj*255,dtype=np.uint8)
#maxproj*=255.0/maxproj.max()
####
#####binary_global = maxproj > threshold_otsu(maxproj)
#####thresh_niblack = threshold_niblack(maxproj, window_size=window_size, k=0.8)
#thresh_sauvola = threshold_sauvola(maxproj, window_size=window_size, k=0.5, r=128)
####
#####binary_niblack = maxproj > thresh_niblack
#binary_sauvola = maxproj > thresh_sauvola
##tifffile.imshow(binary_sauvola)
####
#opening=binary_opening(invert(binary_sauvola),np.ones((3,3),np.uint8))
#opening=opening.astype(np.uint8)
#maxproj=maxproj.astype(np.uint8)
#color=cv2.cvtColor(maxproj,cv2.COLOR_GRAY2RGB)
####
##tifffile.imshow(opening)
#cnts=cv2.findContours(opening.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
#cnts=cnts[0] if imutils.is_cv2() else cnts[1]
###
#cXs=[]
#cYs=[]
#metricarray=[]
#dp = np.arange(mind, maxd, steps)
##
####loop over the contours
#for i,c in enumerate (cnts):
#     M = cv2.moments(c)
#     cX = int(M["m10"] / M["m00"])
#     cY = int(M["m01"] / M["m00"])
#     (x,y,w,h) = cv2.boundingRect(c)
#     cXs.append(cX)
#     cYs.append(cY)
#     cv2.drawContours(color, [c], -1, (0, 255, 0), 1)
#     cv2.circle(color, (cX, cY), 1, (255, 255, 255), -1)
#     #cv2.rectangle(color,(x,y),(x+w,y+h),(0,255,255),1)
#     cv2.putText(color, "center#{}".format(i), (cX - 20, cY - 20),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
#     
#     for d in dp:
#        ind=(d-mind)/steps
#        particle = newrawstack[ind,y:y+h,x:x+w]
#                
#        Metric=np.linalg.norm(particle)
#        #print ("The norm iof particle {} at distance{}mm is {} ".format(i,d,Metric))
#        metricarray=np.append(metricarray,[Metric])
###        T
##cv2.imshow("labeled",color)
#metricarray2=metricarray.reshape(len(cnts),len(dp))
####
#####the minimum of rows is axis=1, col is axis=0
####
#minimumvalue=metricarray2.min(axis=1)
#####this gives the minimum value of each xy object
####
#minimumdp=np.argmin(metricarray2,axis=1)
#ranges = np.arange(0, len(minimumdp), 1)
####
#for i in ranges:
#    print ("The focused distance for particle #{} is {} mm ".format(i+1,minimumdp[i]))
####
##fig = plt.figure()
##ax = fig.add_subplot(111, projection ='3d')
###
##ax.scatter(cXs,cYs,minimumdp, c='r', marker='o')
###
##ax.set_xlabel('X Label')
##ax.set_ylabel('Y Label')
##ax.set_zlabel('Z lebel')
###
##plt.show()
#
#
#elapsed = timeit.default_timer()-start_time
#print elapsed
