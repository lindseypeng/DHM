import cv2
from mpl_toolkits.mplot3d import Axes3D
import tifffile
from skimage.filters import threshold_sauvola
from skimage.morphology import binary_opening
from skimage.util import invert
import numpy as np

import imutils
import timeit
import matplotlib.pyplot as plt

import pandas as pd

minN=1024
numbers=2 ##number of captured images(orreconstructed stacks)
rangenum=range(numbers)##0,1,2,3,4,..
newrawstack=np.zeros((numbers,minN,minN))
placeholder="/home/alinsi/Desktop/aug11lakeA4/Pos0/reconstructed/reconstruct{}.tif"
placesave="/home/alinsi/Desktop/aug11lakeA4/Pos0/MIP/MIP{}.tif"
placesave2="/home/alinsi/Desktop/aug11lake/lakeD/aug11lakeD20.1ms/Pos0/binary/binary{}.tif"
maxd=50#looping of distance in mm from object to CCD , maximum is 22cm, 220mm,minmum is 60mm6
mind=40
steps=1#distanced looping step
    

###save binary picture for trackpy in a stack##
minprojstack=np.empty((numbers,minN,minN))
threeDPositions=pd.DataFrame()
#
for f in rangenum:##looping through every single stack##
    start_time=timeit.default_timer()
    f2="{:02d}".format(f)

    image_path=placeholder.format((f2))
    save_path=placesave.format((f2))
    save_path2=placesave2.format((f2))
    #print image_path
    h = (tifffile.imread(image_path))
    
    
    newrawstack= np.array(h).astype(np.float32)
    
   
    indd=np.arange(1,minN,1)
    maxproj = newrawstack[0,:,:].copy()
    
    imageslices=(maxd-mind)/steps    
    slicerange = np.arange(0, imageslices, 1)
    for slice in slicerange:
        amp_rec_image=newrawstack[slice].copy()
    #    
        for p in indd:
            for j in indd:
                  if maxproj[p][j] > amp_rec_image[p][j]:
                      maxproj[p][j] = amp_rec_image[p][j]
    
    
    
    ##threshold to find 
    window_size = 25
    ####maxproj = np.array(maxproj*255,dtype=np.uint8)
    maxproj*=255.0/maxproj.max()
    ###
    minprojstack[f,:,:]=maxproj
    tifffile.imsave(save_path,maxproj.astype(np.uint8 ))
    ####binary_global = maxproj > threshold_otsu(maxproj)
    ####thresh_niblack = threshold_niblack(maxproj, window_size=window_size, k=0.8)
    thresh_sauvola = threshold_sauvola(maxproj, window_size=window_size, k=0.1, r=128)
    
    binary_sauvola = maxproj > thresh_sauvola
    
    opening=binary_opening(invert(binary_sauvola),np.ones((3,3),np.uint8))
    opening=opening.astype(np.uint8)
    
    #tifffile.imsave(save_path2,opening)
    minprojstack[f,:,:]=opening
    #tifffile.imsave(save_path2,opening)
    maxproj=maxproj.astype(np.uint8)
    #tifffile.imsave(save_path,maxproj)
    color=cv2.cvtColor(maxproj,cv2.COLOR_GRAY2RGB)
#    
    cnts=cv2.findContours(opening.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    cnts=cnts[0] if imutils.is_cv2() else cnts[1]
#    ##
    cXs=[]#a list of center x position of particles
    cYs=[]#a list of center y position of particles
   # metricarray=[]
    dp = np.arange(mind, maxd, steps)
 #i need to create a 3d array for recording positions   
    threeDPosition=np.empty((len(rangenum),len(cnts),3))
#    #
    index=range(len(cnts))
    ###loop over the contours
    for i,c in enumerate (cnts):
         M = cv2.moments(c)
         cX = int(M["m10"] / M["m00"])
         cY = int(M["m01"] / M["m00"])
         (x,y,w,h) = cv2.boundingRect(c)
#         cXs.append(cX)
#         cYs.append(cY)
#         cv2.drawContours(color, [c], -1, (0, 255, 0), 1)
#         #cv2.circle(color, (cX, cY), 1, (255, 255, 255), -1)
#         cv2.rectangle(color,(x,y),(x+w,y+h),(0,255,255),1)
#         cv2.putText(color, "center#{}".format(i), (cX - 20, cY - 20),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
#         
         metricarray=[]  
         for d in dp:
             ind=(d-mind)/steps
             particle = newrawstack[ind,y:y+h,x:x+w]
#                        
             Metric=np.linalg.norm(particle)#CALCULATE AREA INTENSITY OF THE PARTICULAR PARTICLES IN EACH RECONSTRUCTION STEP
#             #print ("The norm iof particle {} at distance{}mm is {} ".format(i,d,Metric))
             metricarray=np.append(metricarray,[Metric])# A LIST OF INTENSITY OF THE OBJECT OF INTERST AT EACH RECONSTRUCTION STEP
#       
         minimumvalue=metricarray.min
         minimumindex=np.argmin(minimumvalue)
         minimumdp=dp[minimumindex]

         threeDPosition[f,i,:]=cX,cY,minimumdp
         
         threeDposition=pd.DataFrame( {'frame':f,'particle': i, 'cX': cX, 'cY': cY, 'mindp': minimumdp},index=[str(f)])
         print "this is particle {} in frame {}".format(i,f)
         
         
         threeDPositions=threeDPositions.append(threeDposition,ignore_index=True)
         print threeDPositions

threeDPositions.to_csv('/home/alinsi/Desktop/aug11lakeA4/Pos0.csv')




    #threeDPositions=np.append([threeDPositions],[threeDPosition])
#    tifffile.imshow(color)
##    tifffile.imsave(save_path,color)
            # metricarray2=metricarray.reshape(len(cnts),len(dp))#PUT IT INTO 2 D ARRAY OF PARTICLES BY DISTANCE
#   
#####        T
####cv2.imshow("labeled",color)
###    ###
##    ####the minimum of rows is axis=1, col is axis=0
##    ###
            #minimumvalue=metricarray2.min(axis=1)
#    ####this gives the minimum value of each xy object
#    ###this then finds the indexes of where the minimum value was , but need to translate back to 
##reconstruction distance from the index of the array
           # minimumindex=np.argmin(metricarray2,axis=1)
           #minimumdp=dp[minimumindex]
            
            
    
#    ranges = np.arange(0, len(minimumdp), 1)
#    ###
#    for i in ranges:
#        print ("The focused distance for particle #{} is {} mm ".format(i+1,minimumdp[i]))
#    
#    fig = plt.figure()
#    ax = fig.add_subplot(111, projection ='3d')
#    #
#    ax.scatter(cXs,cYs,minimumdp, c='r', marker='o')
#    #
#    ax.set_xlabel('X Label')
#    ax.set_ylabel('Y Label')
#    ax.set_zlabel('Z lebel')
#    
#    plt.savefig(save_path2)
   # plt.close()
  ##minprojstack is actually binarized picture right now
#tifffile.imsave("/home/alinsi/Desktop/June27minproj/stack.tif",minprojstack.astype(np.float32))
